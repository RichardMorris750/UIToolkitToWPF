;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATA_CLR_V3.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Model
import Symphony.Conductor.Converters

namespace WPFPartMaintenance.Model

    ;;define a structure that we can use around the applicaiton

    .include 'part' repository  , structure = 'STRPart', end

    public partial class Part_Data extends Symphony.Conductor.Model.DataObjectBase

		public const RPSStructureName	,String	,"PART"
		public const RPSStructureSize	,Int32	,700

		private part_main	,STRPart

		private mDoneSynergyRecordValue	,boolean

		;;use symphony converters
		private mDateConveter		,@SynergyDecimalDateConverter	,new SynergyDecimalDateConverter()
		private mAlphaConveter		,@SynergyAlphaConverter	,new SynergyAlphaConverter()
		private mAlphaTFConveter	,@SynergyAlphaYNConverter	,new SynergyAlphaYNConverter()
		private mDecimalConveter	,@SynergyDecimalConverter	,new SynergyDecimalConverter()
		private mImpliedDecimalConveter	,@SynergyImpliedDecimalConverter	,new SynergyImpliedDecimalConverter()
		private mIntegerConveter	,@SynergyIntConverter	,new SynergyIntConverter()
		private mDecimalTFConverter	,@SynergyDecimalTFConverter	,new SynergyDecimalTFConverter()

		static method Part_Data
			endparams
		proc
			mStaticFieldList = new List<BaseFieldInformation>()
			mStaticFieldDictionary = new Dictionary<string, int>()
			mStaticFieldNameList = new List<String>()
			mStaticFieldHeadingList = new List<String>()

			
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "ID", "Id",  "", "",
			&	"", "ID", 1, 20,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "GROUPID", "Groupid",  "Change_Group_Id", "",
			&	"", "GROUPID", 21, 20,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "SUPPLIERID", "Supplierid",  "Change_Supplier_Id", "",
			&	"", "SUPPLIERID", 41, 20,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "DESCRIPTION", "Description",  "", "",
			&	"", "DESCRIPTION", 61, 50,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "TECHNICAL_INFO", "Technical_info",  "", "",
			&	"", "TECHNICAL_INFO", 111, 500,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "QUANTITY", "Quantity",  "", "",
			&	"", "QUANTITY", 611, 4,
			&	0, 0, 0, 0,
			&	"INTEGER", false, 0, 2147483647)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "COST_PRICE", "Cost_price",  "", "",
			&	"", "COST_PRICE", 615, 10,
			&	0, 0, 0, 0,
			&	"IMPLIED", false, 0, 99999999.99)
			
			staticSetFieldInfo(mStaticFieldList, mStaticFieldDictionary, "SPARE", "Spare",  "", "",
			&	"", "SPARE", 625, 76,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			mStaticFieldNameList.Add("Id")
			mStaticFieldHeadingList.Add("Part ID")
			mStaticFieldNameList.Add("Groupid")
			mStaticFieldHeadingList.Add("Group ID")
			mStaticFieldNameList.Add("Supplierid")
			mStaticFieldHeadingList.Add("Supplier ID")
			mStaticFieldNameList.Add("Description")
			mStaticFieldHeadingList.Add("Description")
			mStaticFieldNameList.Add("Technical_info")
			mStaticFieldHeadingList.Add("Technical Description")
			mStaticFieldNameList.Add("Quantity")
			mStaticFieldHeadingList.Add("Quantity")
			mStaticFieldNameList.Add("Cost_price")
			mStaticFieldHeadingList.Add("Cost price")
			mStaticFieldNameList.Add("Spare")
			mStaticFieldHeadingList.Add("SPARE")

			mreturn
		endmethod

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Part_Data
            endparams
            parent()
        proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			configureFieldInfo()
			setFieldNames()
			InitData()
			mDoneSynergyRecordValue = false
			extendedConstructor()
        endmethod

        ;;; <summary>
        ;;; Alternate constructor, accepts the inital value to assign to the object
        ;;; </summary>
        ;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
        public method Part_Data
            in req synRec       ,String
            endparams
            parent()
        proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			part_main = synRec
			;OriginalSynergyRecord = synRec
			extendedConstructor()
        endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		public method Part_Data
			in req synRec       ,STRPart
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			part_main = synRec
			;OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Part_Data
			in req synRec       ,String
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			part_main = synRec
			;OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="synRec">Provide the data to load into the _DATAOBJECT_</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Part_Data
			in req synRec       ,STRPart
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			mDoneSynergyRecordValue = true
			doingClearFocus = false

			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			part_main = synRec
;			OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

        ;;Set up the arrays of field details
        private method configureFieldInfo	,void
			endparams
		proc
			
			mfieldArray = mStaticFieldList
			mfieldDictionary = mStaticFieldDictionary

		endmethod

		private static mStaticFieldList			,@List<BaseFieldInformation>
		private static mStaticFieldDictionary	,@Dictionary<string, int>
		private static mStaticFieldNameList		,@List<String>
		private static mStaticFieldHeadingList	,@List<String>

        ;;Set up the arrays of field names and headings
        private method setFieldNames	,void
			endparams
		proc

			mFieldNames = mStaticFieldNameList
			mFieldHeadings = mStaticFieldHeadingList
			
		endmethod

        ;;Expose fields as properties for data binding

        ;;Id
		public property Id, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(part_main.id, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Id .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Id = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(1)
					RaisePropertyChanged("Id")
				end
			endmethod
		endproperty
        ;;Groupid
		public property Groupid, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(part_main.groupid, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Groupid .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Groupid = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(2)
					RaisePropertyChanged("Groupid")
				end
			endmethod
		endproperty
        ;;Supplierid
		public property Supplierid, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(part_main.supplierid, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Supplierid .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Supplierid = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(3)
					RaisePropertyChanged("Supplierid")
				end
			endmethod
		endproperty
        ;;Description
		public property Description, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(part_main.description, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Description .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Description = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(4)
					RaisePropertyChanged("Description")
				end
			endmethod
		endproperty
        ;;Technical_info
		public property Technical_info, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(part_main.technical_info, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Technical_info .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Technical_info = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(5)
					RaisePropertyChanged("Technical_info")
				end
			endmethod
		endproperty
        ;;Quantity
		public property Quantity, Int32
			method get
			proc
				mreturn (int32)mIntegerConveter.Convert(part_main.quantity, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Quantity .ne. (i)mIntegerConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Quantity = (i)mIntegerConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(6)
					RaisePropertyChanged("Quantity")
				end
			endmethod
		endproperty
        ;;Cost_price
		public property Cost_price, Decimal
			method get
			proc
				mreturn (decimal)mImpliedDecimalConveter.Convert(part_main.cost_price, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Cost_price .ne. (id)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Cost_price = (id)mImpliedDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(7)
					RaisePropertyChanged("Cost_price")
				end
			endmethod
		endproperty
        ;;Spare
		public property Spare, String
			method get
			proc
				mreturn (string)mAlphaConveter.Convert(part_main.spare, ^null, ^null, ^null)
            endmethod
			method set
			proc
				if (Part_main.Spare .nes. (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null))
				begin
				Part_main.Spare = (a)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
					ValidateEnteredData(8)
					RaisePropertyChanged("Spare")
				end
			endmethod
		endproperty
			
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn (String)Part_main
            endmethod
            method set
            proc
				if (!mDoneSynergyRecordValue)
					OriginalSynergyRecord = value

				mDoneSynergyRecordValue = true
				
				setUsed()
                Part_main = value

                ;;Signal that all fields have changed
                
				SetFieldValid("Id")
									if (mValidateSynergyData) ValidateEnteredData(1)
				SetFieldValid("Groupid")
									if (mValidateSynergyData) ValidateEnteredData(2)
				SetFieldValid("Supplierid")
									if (mValidateSynergyData) ValidateEnteredData(3)
				SetFieldValid("Description")
									if (mValidateSynergyData) ValidateEnteredData(4)
				SetFieldValid("Technical_info")
									if (mValidateSynergyData) ValidateEnteredData(5)
				SetFieldValid("Quantity")
									if (mValidateSynergyData) ValidateEnteredData(6)
				SetFieldValid("Cost_price")
									if (mValidateSynergyData) ValidateEnteredData(7)
				SetFieldValid("Spare")
									if (mValidateSynergyData) ValidateEnteredData(8)
				RaisePropertyChanged(^null)
				RaiseSynergyRecordChanged()
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow the host to initialise all fields.
        ;;; </summary>
        public override method InitData ,void
        proc
			init Part_main
			RaisePropertyChanged(^null)
			parent.InitData()
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
            endparams
        proc
			
				            ValidateEnteredData(1)
            RaisePropertyChanged("Id")
				            ValidateEnteredData(2)
            RaisePropertyChanged("Groupid")
				            ValidateEnteredData(3)
            RaisePropertyChanged("Supplierid")
				            ValidateEnteredData(4)
            RaisePropertyChanged("Description")
				            ValidateEnteredData(5)
            RaisePropertyChanged("Technical_info")
				            ValidateEnteredData(6)
            RaisePropertyChanged("Quantity")
				            ValidateEnteredData(7)
            RaisePropertyChanged("Cost_price")
				            ValidateEnteredData(8)
            RaisePropertyChanged("Spare")

        endmethod

        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
            using fieldName select
			
			
            ("ID"), mCurrentField = 1
			
            ("GROUPID"), mCurrentField = 2
			
            ("SUPPLIERID"), mCurrentField = 3
			
            ("DESCRIPTION"), mCurrentField = 4
			
            ("TECHNICAL_INFO"), mCurrentField = 5
			
            ("QUANTITY"), mCurrentField = 6
			
            ("COST_PRICE"), mCurrentField = 7
			
            ("SPARE"), mCurrentField = 8
            (),
                mCurrentField = 0
            endusing
            RaisePropertyChanged("CurrentFieldInfo")
        endmethod

        ;;; <summary>
        ;;; Expose information about the current field
        ;;; </summary>
        ;;; <returns>Current field information</returns>
        public property CurrentFieldInfo    ,String
            method get
            proc
                using mCurrentField select
				
				
                (1),    mreturn ""
				
                (2),    mreturn ""
				
                (3),    mreturn ""
				
                (4),    mreturn ""
				
                (5),    mreturn ""
				
                (6),    mreturn ""
				
                (7),    mreturn ""
				
                (8),    mreturn ""
				(), mreturn ""  ;;if incorrect field value or not configured, ensure we clear the return value
                endusing
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are enabled
        
		

        public property IdIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(1)
            endmethod
            method set
            proc
                SetFieldEnabledState(1, value)
                RaiseNonRPSPropertyChanged("IdIsEnabled")
            endmethod
        endproperty
		

        public property GroupidIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(2)
            endmethod
            method set
            proc
                SetFieldEnabledState(2, value)
                RaiseNonRPSPropertyChanged("GroupidIsEnabled")
            endmethod
        endproperty
		

        public property SupplieridIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(3)
            endmethod
            method set
            proc
                SetFieldEnabledState(3, value)
                RaiseNonRPSPropertyChanged("SupplieridIsEnabled")
            endmethod
        endproperty
		

        public property DescriptionIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(4)
            endmethod
            method set
            proc
                SetFieldEnabledState(4, value)
                RaiseNonRPSPropertyChanged("DescriptionIsEnabled")
            endmethod
        endproperty
		

        public property Technical_infoIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(5)
            endmethod
            method set
            proc
                SetFieldEnabledState(5, value)
                RaiseNonRPSPropertyChanged("Technical_infoIsEnabled")
            endmethod
        endproperty
		

        public property QuantityIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(6)
            endmethod
            method set
            proc
                SetFieldEnabledState(6, value)
                RaiseNonRPSPropertyChanged("QuantityIsEnabled")
            endmethod
        endproperty
		

        public property Cost_priceIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(7)
            endmethod
            method set
            proc
                SetFieldEnabledState(7, value)
                RaiseNonRPSPropertyChanged("Cost_priceIsEnabled")
            endmethod
        endproperty
		

        public property SpareIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(8)
            endmethod
            method set
            proc
                SetFieldEnabledState(8, value)
                RaiseNonRPSPropertyChanged("SpareIsEnabled")
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are focussed
		private mIdIsFocused	,Boolean
		public property IdIsFocused, Boolean
			method get
			proc
				mreturn mIdIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mIdIsFocused = value
				RaiseNonRPSPropertyChanged("IdIsFocused")
			endmethod
		endproperty
		private mGroupidIsFocused	,Boolean
		public property GroupidIsFocused, Boolean
			method get
			proc
				mreturn mGroupidIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mGroupidIsFocused = value
				RaiseNonRPSPropertyChanged("GroupidIsFocused")
			endmethod
		endproperty
		private mSupplieridIsFocused	,Boolean
		public property SupplieridIsFocused, Boolean
			method get
			proc
				mreturn mSupplieridIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mSupplieridIsFocused = value
				RaiseNonRPSPropertyChanged("SupplieridIsFocused")
			endmethod
		endproperty
		private mDescriptionIsFocused	,Boolean
		public property DescriptionIsFocused, Boolean
			method get
			proc
				mreturn mDescriptionIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mDescriptionIsFocused = value
				RaiseNonRPSPropertyChanged("DescriptionIsFocused")
			endmethod
		endproperty
		private mTechnical_infoIsFocused	,Boolean
		public property Technical_infoIsFocused, Boolean
			method get
			proc
				mreturn mTechnical_infoIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mTechnical_infoIsFocused = value
				RaiseNonRPSPropertyChanged("Technical_infoIsFocused")
			endmethod
		endproperty
		private mQuantityIsFocused	,Boolean
		public property QuantityIsFocused, Boolean
			method get
			proc
				mreturn mQuantityIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mQuantityIsFocused = value
				RaiseNonRPSPropertyChanged("QuantityIsFocused")
			endmethod
		endproperty
		private mCost_priceIsFocused	,Boolean
		public property Cost_priceIsFocused, Boolean
			method get
			proc
				mreturn mCost_priceIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mCost_priceIsFocused = value
				RaiseNonRPSPropertyChanged("Cost_priceIsFocused")
			endmethod
		endproperty
		private mSpareIsFocused	,Boolean
		public property SpareIsFocused, Boolean
			method get
			proc
				mreturn mSpareIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mSpareIsFocused = value
				RaiseNonRPSPropertyChanged("SpareIsFocused")
			endmethod
		endproperty

        ;;Expose properties to indicate whether fields are read only
		
		

		public property IdIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(1)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(1, value)
				RaiseNonRPSPropertyChanged("IdIsReadOnly")
			endmethod
		endproperty
		

		public property GroupidIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(2)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(2, value)
				RaiseNonRPSPropertyChanged("GroupidIsReadOnly")
			endmethod
		endproperty
		

		public property SupplieridIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(3)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(3, value)
				RaiseNonRPSPropertyChanged("SupplieridIsReadOnly")
			endmethod
		endproperty
		

		public property DescriptionIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(4)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(4, value)
				RaiseNonRPSPropertyChanged("DescriptionIsReadOnly")
			endmethod
		endproperty
		

		public property Technical_infoIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(5)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(5, value)
				RaiseNonRPSPropertyChanged("Technical_infoIsReadOnly")
			endmethod
		endproperty
		

		public property QuantityIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(6)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(6, value)
				RaiseNonRPSPropertyChanged("QuantityIsReadOnly")
			endmethod
		endproperty
		

		public property Cost_priceIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(7)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(7, value)
				RaiseNonRPSPropertyChanged("Cost_priceIsReadOnly")
			endmethod
		endproperty
		

		public property SpareIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(8)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(8, value)
				RaiseNonRPSPropertyChanged("SpareIsReadOnly")
			endmethod
		endproperty

		private doingClearFocus	,Boolean

		private method clearFocus, void
			endparams
		proc
			if (!doingClearFocus)
			begin
				doingClearFocus = true
				if (IdIsFocused) IdIsFocused = false
				if (GroupidIsFocused) GroupidIsFocused = false
				if (SupplieridIsFocused) SupplieridIsFocused = false
				if (DescriptionIsFocused) DescriptionIsFocused = false
				if (Technical_infoIsFocused) Technical_infoIsFocused = false
				if (QuantityIsFocused) QuantityIsFocused = false
				if (Cost_priceIsFocused) Cost_priceIsFocused = false
				if (SpareIsFocused) SpareIsFocused = false
				doingClearFocus = false
			end
		endmethod

		public method FieldErrorDetails	,void
			in req fldName				,String
			in req errorText			,String
			endparams
		proc
			setErrorDetails(fldName, errorText)
			RaisePropertyChanged(fldName)
		endmethod

		public method FieldValidDetails	,void
			in req fldName				,String
			endparams
		proc
			SetFieldValid(fldName)
			RaisePropertyChanged(fldName)
		endmethod

		public override method CompareObjects	,int
			in req obj1							,@Object
			in req obj2							,@Object
			in req colName						,String
			in req sortDir						,Symphony.Conductor.Framework.SynergySortOrder
			endparams

			record
				result		,int
			endrecord
		proc
			using colName select
			("Id"),
			begin
				if (((Part_Data)obj1).Id == ((Part_Data)obj2).Id) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Id > ((Part_Data)obj2).Id) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Groupid"),
			begin
				if (((Part_Data)obj1).Groupid == ((Part_Data)obj2).Groupid) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Groupid > ((Part_Data)obj2).Groupid) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Supplierid"),
			begin
				if (((Part_Data)obj1).Supplierid == ((Part_Data)obj2).Supplierid) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Supplierid > ((Part_Data)obj2).Supplierid) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Description"),
			begin
				if (((Part_Data)obj1).Description == ((Part_Data)obj2).Description) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Description > ((Part_Data)obj2).Description) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Technical_info"),
			begin
				if (((Part_Data)obj1).Technical_info == ((Part_Data)obj2).Technical_info) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Technical_info > ((Part_Data)obj2).Technical_info) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Quantity"),
			begin
				if (((Part_Data)obj1).Quantity == ((Part_Data)obj2).Quantity) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Quantity > ((Part_Data)obj2).Quantity) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Cost_price"),
			begin
				if (((Part_Data)obj1).Cost_price == ((Part_Data)obj2).Cost_price) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Cost_price > ((Part_Data)obj2).Cost_price) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Spare"),
			begin
				if (((Part_Data)obj1).Spare == ((Part_Data)obj2).Spare) then
					result = 0
				else
				begin
					if (((Part_Data)obj1).Spare > ((Part_Data)obj2).Spare) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			(),
				result = this.CustomCompareObjects(obj1, obj2, colName, sortDir)
			endusing

			mreturn result
		endmethod

	endclass
endnamespace

