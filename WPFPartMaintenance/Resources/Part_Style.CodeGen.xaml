<!--
 WARNING: This code was generated by CodeGen. Any changes that you
          make to this code will be overwritten if the code is regenerated!

 Template author:	Richard C. Morris, Synergex Professional Services Group

 Template Name:	Symphony Framework : SYMPHONY_STYLE_CLR_V3.tpl

-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:clr="clr-namespace:System;assembly=mscorlib"
    xmlns:symphonyConverters="clr-namespace:Symphony.Conductor.Converters;assembly=SymphonyConductor"
    xmlns:symphonyTriggers="clr-namespace:Symphony.Conductor.Triggers;assembly=SymphonyConductor"
    xmlns:symphonyUI="clr-namespace:Symphony.Crescendo.Presentation;assembly=SymphonyCrescendo"
    xmlns:symphonyControls="clr-namespace:Symphony.Conductor.Controls;assembly=SymphonyConductor"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity">

    <ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Styles.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Converters.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/WPFPartMaintenance;component/Resources/Part_Content.CodeGen.xaml"/>
     </ResourceDictionary.MergedDictionaries>


	<clr:String x:Key="Part_Id_heading">Part ID</clr:String>


	<Style x:Key="Part_Id_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Part ID"
						IsEnabled="{Binding Path=IdIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Id_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctlPart_Id"
                        Text="{Binding Path=Id, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="20"
						Width="240"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=IdIsEnabled}"
						IsReadOnly="{Binding Path=IdIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IdIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Id}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Part_Groupid_heading">Group ID</clr:String>


	<Style x:Key="Part_Groupid_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Group ID"
						IsEnabled="{Binding Path=GroupidIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Groupid_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SearchTextBox
						HorizontalAlignment="Left"
                        Name="ctlPart_Groupid"
                        Text="{Binding Path=Groupid, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
						SearchMode="Delayed"
						                        Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.NavigateState}"
                        CommandParameter="Drill_Group_IdDrillState"
                        MaxLength="20"
						Width="240"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=GroupidIsEnabled}"
						IsReadOnly="{Binding Path=GroupidIsReadOnly}"
						VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SearchTextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=GroupidIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Groupid}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background" >
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SearchTextBox.Style>
                    </symphonyUI:SearchTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Part_Groupid_noDrill_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctlPart_Groupid_noDrill"
                        Text="{Binding Path=Groupid, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="20"
						Width="240"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=GroupidIsEnabled}"
						IsReadOnly="{Binding Path=GroupidIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=GroupidIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Groupid_noDrill}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background" >
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Part_Supplierid_heading">Supplier ID</clr:String>


	<Style x:Key="Part_Supplierid_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Supplier ID"
						IsEnabled="{Binding Path=SupplieridIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Supplierid_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SearchTextBox
						HorizontalAlignment="Left"
                        Name="ctlPart_Supplierid"
                        Text="{Binding Path=Supplierid, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
						SearchMode="Delayed"
						                        Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.NavigateState}"
                        CommandParameter="Drill_Supplier_IdDrillState"
                        MaxLength="20"
						Width="240"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=SupplieridIsEnabled}"
						IsReadOnly="{Binding Path=SupplieridIsReadOnly}"
						VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SearchTextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=SupplieridIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Supplierid}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background" >
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SearchTextBox.Style>
                    </symphonyUI:SearchTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Part_Supplierid_noDrill_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctlPart_Supplierid_noDrill"
                        Text="{Binding Path=Supplierid, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="20"
						Width="240"
						CharacterCasing="Upper"
                        IsEnabled="{Binding Path=SupplieridIsEnabled}"
						IsReadOnly="{Binding Path=SupplieridIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=SupplieridIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Supplierid_noDrill}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background" >
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Part_Description_heading">Description</clr:String>


	<Style x:Key="Part_Description_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Description"
						IsEnabled="{Binding Path=DescriptionIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Description_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctlPart_Description"
                        Text="{Binding Path=Description, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="50"
						Width="600"
                        IsEnabled="{Binding Path=DescriptionIsEnabled}"
						IsReadOnly="{Binding Path=DescriptionIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=DescriptionIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Description}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Part_Technical_info_heading">Technical Description</clr:String>


	<Style x:Key="Part_Technical_info_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Technical Description"
						IsEnabled="{Binding Path=Technical_infoIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Technical_info_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctlPart_Technical_info"
                        Text="{Binding Path=Technical_info, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="500"
						Width="600" Height="120" TextWrapping="Wrap"
                        IsEnabled="{Binding Path=Technical_infoIsEnabled}"
						IsReadOnly="{Binding Path=Technical_infoIsReadOnly}"
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Technical_infoIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Technical_info}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Part_Quantity_heading">Quantity</clr:String>


	<Style x:Key="Part_Quantity_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Quantity"
						IsEnabled="{Binding Path=QuantityIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Quantity_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyIntBox
						HorizontalAlignment="Left"
                        Name="ctlPart_Quantity"
                        Text="{Binding Path=Quantity, UpdateSourceTrigger=PropertyChanged,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=QuantityIsEnabled}"
                        MaxLength="4"
						Width="48"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyIntBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=QuantityIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Quantity}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyIntBox.Style>
                    </symphonyUI:SynergyIntBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	

	<clr:String x:Key="Part_Cost_price_heading">Cost price</clr:String>


	<Style x:Key="Part_Cost_price_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="Cost price"
						IsEnabled="{Binding Path=Cost_priceIsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>



    <Style x:Key="Part_Cost_price_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
						HorizontalAlignment="Left"
						VerticalAlignment="Center"
                        Name="ctlPart_Cost_price"
                        Text="{Binding Path=Cost_price
								, UpdateSourceTrigger=PropertyChanged
                                , ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=Cost_priceIsEnabled}"
						IsReadOnly="{Binding Path=Cost_priceIsReadOnly}"
                        SynergyDecimalField="True"                         NumberOfDecimals="2"
						MaxLength="12"
						Width="144"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=Cost_priceIsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctlPart_Cost_price}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	
</ResourceDictionary>

